---
- name: 01-SETUP -- Create app_name directory
  ansible.builtin.file:
    state: directory
    path: "{{ project_dir }}/apps/{{ app_name }}"
    owner: "{{ project_dir_owner }}"
    group: "{{ project_dir_group }}"
    mode: 0700
  become: true

- name: 01-SETUP -- Create app subdirectories
  ansible.builtin.file:
    state: directory
    path: "{{ project_dir }}/apps/{{ app_name }}/{{ item }}"
    mode: 0770
  loop:
    - data
    - data/grist
    - config

- name: 01-SETUP -- Create subdirs for bitnami apps
  ansible.builtin.file:
    state: directory
    path: "{{ project_dir}}/apps/{{app_name}}/{{item }}"
    mode: 0770
    owner: 1001
    group: "{{ project_dir_group }}"
  become: true
  loop:
    - data/postgresql
    - data/redis

- name: 01-SETUP -- create Caddyfile from template
  ansible.builtin.template:
    src: Caddyfile.j2
    dest: "{{ project_dir }}/config/caddy-apps/{{ app_name }}"
    owner: "{{ project_dir_owner }}"
    group: "{{ project_dir_group }}"
    mode: 0600
  become: true

- name: 01-SETUP -- create compose.yml file
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ project_dir }}/apps/{{ app_name }}/{{ item }}"
    owner: "{{ project_dir_owner }}"
    group: "{{ project_dir_group }}"
    mode: 0600
  loop:
    - compose.yml
    - .env
  become: true


- name: 01-SETUP -- Add / modify {{ APP }}_INCLUDE_PATH in root .env file
  ansible.builtin.lineinfile:
    path: "{{ project_dir }}/.env"
    regexp: '^{{ app_name | upper }}_COMPOSE_PATH=./apps/{{ app_name }}/compose.yml'
    line: '{{ app_name | upper }}_COMPOSE_PATH=./apps/{{ app_name }}/compose.yml'

- name: 02-START -- Make sure caddy is restarted
  community.docker.docker_compose_v2:
    project_src: "{{ project_dir }}"
    state: restarted
    services:
      - caddy


# https://support.getgrist.com/install/cloud-storage/

# - name: 04-ADDONS-S3 -- Start minio if local
#   community.docker.docker_compose_v2:
#     project_src: "{{ project_dir }}"
#     state: present
#     services:
#       - minio
#   when: minio_is_local == 'true'

# - name: 04-ADDONS-S3 Wait for minio to be available on "{{ s3_backend_url }}/test"
#   uri:
#     url: '{{ s3_backend_url }}'
#     return_content: no
#     validate_certs: yes
#     status_code:
#       - 403
#   register: site_up_output
#   until: site_up_output.status == 403
#   retries: 12
#   delay: 5
#   delegate_to: localhost


# - name: 04-ADDONS-S3 -- Add Minio buckets for grist
#   dubzland.minio.minio_bucket:
#     name: "{{ item }}"
#     minio_url: '{{ s3_backend_url }}'
#     minio_access_key: '{{ minio_admin_user }}'
#     minio_secret_key: '{{ minio_admin_pass }}'
#     state: present
#   loop: 
#     - grist-bucket
#   delegate_to: localhost

# - name: 04-ADDONS-S3 -- Add Minio Grist bucket policy
#   dubzland.minio.minio_policy:
#     name: GristBucketPolicy
#     data: |
#       {
#         "Version": "2012-10-17",
#         "Statement": [
#           {
#             "Effect": "Allow",
#             "Action": [
#               "s3:GetBucketLocation",
#               "s3:ListBucket",
#               "s3:ListBucketMultipartUploads"
#             ],
#             "Resource": [
#               "arn:aws:s3:::grist-bucket"
#             ]
#           },
#           {
#             "Action": [
#               "s3:AbortMultipartUpload",
#               "s3:DeleteObject",
#               "s3:GetObject",
#               "s3:ListMultipartUploadParts",
#               "s3:PutObject"
#             ],
#             "Effect": "Allow",
#             "Resource": [
#               "arn:aws:s3:::grist-bucket/*"
#             ],
#             "Sid": ""
#           }
#         ]
#       }
#     minio_url: '{{ s3_backend_url }}'
#     minio_access_key: '{{ minio_admin_user }}'
#     minio_secret_key: '{{ minio_admin_pass }}'
#     state: present
#   delegate_to: localhost

# - name: 04-ADDONS-S3 -- Add a Minio user for grist
#   dubzland.minio.minio_user:
#     access_key: grist-minio
#     secret_key: "{{ grist_s3_key }}"
#     minio_url: '{{ s3_backend_url }}'
#     minio_access_key: '{{ minio_admin_user }}'
#     minio_secret_key: '{{ minio_admin_pass }}'
#     state: present
#     policy: GristBucketPolicy
#   delegate_to: localhost


- name: 04-ADDONS-SSO -- Start keycloak if local
  community.docker.docker_compose_v2:
    project_src: "{{ project_dir }}"
    state: present
    services:
      - keycloak
  when: keycloak_is_local == 'true'

- name: 04-ADDONS-SSO -- Wait for keycloak to be available on "{{ keycloak_auth_url }}/test"
  uri:
    url: '{{ keycloak_auth_url }}/test'
    return_content: no
    validate_certs: yes
    status_code:
      - 404
  register: site_up_output
  until: site_up_output.status == 404
  retries: 12
  delay: 5
  delegate_to: localhost

- name: 04-ADDONS-SSO -- Create {{ keycloak_realm }} for keycloak
  community.general.keycloak_realm:
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ keycloak_auth_url }}"
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_pass }}"
    id: "{{ keycloak_realm }}"
    realm: "{{ keycloak_realm }}"
    state: present
    enabled: true
  delegate_to: localhost

- name: 04-ADDONS-SSO -- Create or update a Keycloak client
  community.general.keycloak_client:
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ keycloak_auth_url }}"
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_pass }}"
    client_id: "{{ app_name }}"
    realm: "{{ keycloak_realm }}"
    state: present
    name: "{{ app_name }}-oidc"
    description: "{{ app_name }} client"
    enabled: true
    client_authenticator_type: client-secret
    secret: "{{ grist_keycloak_secret }}"
    root_url: "https://{{ app_subdomain }}.{{ domain_name }}"
    redirect_uris:
      - "/oauth2/callback"
      - "/signed-out"
    web_origins:
      - "https://{{ app_subdomain }}.{{ domain_name }}"
    protocol: openid-connect
  delegate_to: localhost

- name: 04-ADDONS-SSO -- Create a user for keycloak realm
  community.general.keycloak_user:
    auth_client_id: admin-cli
    auth_keycloak_url: "{{ keycloak_auth_url }}"
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_pass }}"
    id: "{{ keycloak_realm }}"
    realm: "{{ keycloak_realm }}"
    username: "{{ main_user_name }}"
    firstName: E
    lastName: M
    email: "{{ main_user_email }}"
    enabled: true
    emailVerified: true
    credentials:
      - type: password
        value: "{{ main_user_password }}"
        temporary: false
    state: present
  delegate_to: localhost


###########################    99-FINISH    ###########################
- name: 99-FINISH -- Take down and init app services
  community.docker.docker_compose_v2:
    project_src: "{{ project_dir }}"
    pull: missing
    state: present
    services:
      - caddy
      - grist
      - grist-db
  loop: 
    - absent
    - present

- name: 99-FINISH Wait until app is available on on "https://{{ app_subdomain }}.{{ domain_name }}
  uri:
    url: 'https://{{ app_subdomain }}.{{ domain_name }}'
    return_content: no
    validate_certs: yes
    status_code:
      - 200
  until: site_up_output.status == 200
  retries: 24 # 120 seconds = 2 minutes
  delay: 5
  register: site_up_output

